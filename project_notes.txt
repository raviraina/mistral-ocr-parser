# Mistral OCR Project Notes

## Project Requirements
- Parse PDF documents using Mistral OCR API
- Extract text content while maintaining document structure
- Convert images in the PDF into structured markdown sections
- Provide detailed descriptions of images with structured data
- Create a lightweight, installable Python package
- Support structured OCR with schema validation

## Technical Approach
- Use Mistral OCR API to process PDF documents
- Extract text and image content from the OCR results
- Format images with descriptive text in markdown
- Maintain document structure and hierarchy
- Handle complex layouts including multi-column text and mixed content
- Organize code into a proper Python package structure
- Implement structured OCR with schema validation using Pydantic

## Implementation Details
- Created a Python package with modular structure
- Separated functionality into logical modules (parser, image, utils)
- Used Mistral's multimodal capabilities to generate detailed image descriptions
- Implemented batch processing for handling multiple PDFs
- Added command-line interfaces for easy usage
- Structured output in markdown format with proper formatting
- Added unit tests for key functionality
- Made the package installable with pyproject.toml
- Added helper scripts for running examples and tests
- Implemented structured OCR with schema validation
- Added support for language detection and topic extraction

## Dependencies
- mistralai Python client for API access
- pathlib for file handling
- json for processing API responses
- PIL/Pillow for image processing
- dotenv for environment variable management
- tqdm for progress tracking
- pydantic for schema validation
- pycountry for language code handling

## Development Dependencies
- pytest for testing
- pytest-cov for test coverage
- black for code formatting
- isort for import sorting
- flake8 for linting
- mypy for type checking

## API Key Management
- Store API key securely in .env file
- Allow API key to be passed as an environment variable or command-line argument
- Provide clear instructions for API key setup

## Output Format
- Generate markdown output with proper formatting
- Include structured data for images (dimensions, position, content description)
- Maintain document hierarchy (headers, paragraphs, lists, tables)
- Provide detailed image descriptions with metadata
- Support structured JSON output with schema validation

## Package Structure
```
mistral-ocr/
├── .github/                      # GitHub specific files
│   └── workflows/                # CI/CD workflows
│       └── tests.yml             # Automated testing
├── mistral_ocr/                  # Main package directory
│   ├── __init__.py               # Package initialization
│   ├── parser.py                 # Core parser functionality
│   ├── image.py                  # Image processing functionality
│   └── utils.py                  # Utility functions
├── examples/                     # Example scripts
│   ├── simple_example.py         # Basic usage example
│   ├── batch_processing.py       # Batch processing example
│   └── image_example.py          # Image processing example
├── tests/                        # Test directory
│   ├── __init__.py               # Test package initialization
│   ├── test_parser.py            # Parser tests
│   └── test_image.py             # Image processing tests
├── .gitignore                    # Git ignore file
├── .env.example                  # Example environment file
├── LICENSE                       # License file
├── pyproject.toml                # Modern Python packaging
├── README.md                     # Project documentation
├── requirements.txt              # Dependencies
├── run_examples.py               # Script to run examples
└── run_tests.py                  # Script to run tests
```

## Usage Examples
- Single PDF processing: `mistral-ocr --input example.pdf --output example_output.md`
- Batch processing: `mistral-ocr-batch --input-dir pdfs/ --output-dir outputs/`
- Programmatic usage: `from mistral_ocr import parse_pdf`
- Running examples: `python run_examples.py simple_example`
- Running tests: `python run_tests.py --coverage`
- Structured OCR: `from mistral_ocr import structured_ocr`

## Installation
- From PyPI: `pip install mistral-ocr`
- From source: `pip install -e .`
- For development: `pip install -e ".[dev]"`

## Structured OCR Features
- Schema validation with Pydantic
- Language detection
- Topic extraction
- Structured content extraction
- Support for various document types
- Fallback mechanisms for missing dependencies

## Future Enhancements
- Add support for more output formats (JSON, HTML, etc.)
- Implement caching to avoid redundant API calls
- Add error handling and retry mechanisms
- Improve image description quality with custom prompts
- Add support for table extraction and formatting
- Implement progress tracking for large documents
- Add support for custom OCR models and parameters
- Add more comprehensive documentation with Sphinx
- Implement continuous deployment to PyPI 

## Python Version Requirements
- The project now requires Python 3.9 or above
- Updated GitHub Actions workflow to test on Python 3.9, 3.10, 3.11, and 3.12
- Using Ubuntu 22.04 for GitHub Actions to ensure compatibility

## Code Style and Standards
- Using Python 3.9 compatible typing syntax (e.g., List[str] instead of list[str])
- Black configuration targets Python 3.9 and above
- MyPy configuration targets Python 3.9

## API Usage
- Using the Mistral API with the pixtral-12b-latest model for OCR parsing
- Properly implementing the chat.parse method with appropriate schema

## Dependencies
- mistralai>=0.0.10
- python-dotenv>=1.0.0
- markdown>=3.5.1
- pillow>=10.0.0
- tqdm>=4.66.1

## Development Notes
- When adding new code, ensure it's compatible with Python 3.9+
- Use typing syntax compatible with Python 3.9 (List, Dict, Optional, etc.)
- Ensure all GitHub Actions tests pass before merging changes 